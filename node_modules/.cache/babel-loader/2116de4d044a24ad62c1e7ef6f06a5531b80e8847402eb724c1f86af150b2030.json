{"ast":null,"code":"var _jsxFileName = \"/Users/praveenkumarkrishnan/Desktop/Project/userdetails/src/Components/TextField.js\",\n  _s = $RefreshSig$();\nimport { TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenericInputField(props) {\n  _s();\n  const {\n    label,\n    helperText,\n    errorStatus = false,\n    maxLength,\n    type,\n    validate = false\n  } = props;\n  const [inputValue, setinputValue] = useState(\"\");\n  const onChangeHandler = (e = {}) => {\n    var _e$target, _e$target2, _e$target3, _e$target4, _e$target5, _e$target6;\n    let Alphacharregex = /^[a-zA-Z]+$/;\n    let emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    //return emailRegex.test(email);\n    //console.log(\"entered value\", e.target.value);\n    let finalValue;\n    // validate\n    //   ? type === \"onlyAlpha\"\n    //     ? Alphacharregex.test(e?.target?.value)\n    //       ? e?.target?.value\n    //       : \"\"\n    //     :\n    //   : e?.target?.value;\n\n    switch (type) {\n      case \"onlyAlpha\":\n        console.log(\"onlyAlpha\");\n        finalValue = Alphacharregex.test(e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value) ? e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.value : \"\";\n        setinputValue(finalValue);\n        break;\n      case \"email\":\n        console.log(\"email\");\n        finalValue = emailRegex.test(e === null || e === void 0 ? void 0 : (_e$target3 = e.target) === null || _e$target3 === void 0 ? void 0 : _e$target3.value) ? e === null || e === void 0 ? void 0 : (_e$target4 = e.target) === null || _e$target4 === void 0 ? void 0 : _e$target4.value : e === null || e === void 0 ? void 0 : (_e$target5 = e.target) === null || _e$target5 === void 0 ? void 0 : _e$target5.value;\n        setinputValue(finalValue);\n        break;\n      default:\n        console.log(\"default\");\n        finalValue = e === null || e === void 0 ? void 0 : (_e$target6 = e.target) === null || _e$target6 === void 0 ? void 0 : _e$target6.value;\n        setinputValue(finalValue);\n    }\n    setinputValue(finalValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 1\n    },\n    children: /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      error: errorStatus,\n      id: label,\n      label: label,\n      variant: \"outlined\",\n      helperText: errorStatus ? helperText : \"\",\n      onChange: onChangeHandler,\n      value: inputValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(GenericInputField, \"d90VzFnwGII6lm4sXKNW1xQbci4=\");\n_c = GenericInputField;\nvar _c;\n$RefreshReg$(_c, \"GenericInputField\");","map":{"version":3,"names":["TextField","Box","useState","jsxDEV","_jsxDEV","GenericInputField","props","_s","label","helperText","errorStatus","maxLength","type","validate","inputValue","setinputValue","onChangeHandler","e","_e$target","_e$target2","_e$target3","_e$target4","_e$target5","_e$target6","Alphacharregex","emailRegex","finalValue","console","log","test","target","value","sx","p","children","fullWidth","error","id","variant","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/praveenkumarkrishnan/Desktop/Project/userdetails/src/Components/TextField.js"],"sourcesContent":["import { TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useState } from \"react\";\n\nexport default function GenericInputField(props) {\n  const {\n    label,\n    helperText,\n    errorStatus = false,\n    maxLength,\n    type,\n    validate = false,\n  } = props;\n\n  const [inputValue, setinputValue] = useState(\"\");\n  const onChangeHandler = (e = {}) => {\n    let Alphacharregex = /^[a-zA-Z]+$/;\n    let emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    //return emailRegex.test(email);\n    //console.log(\"entered value\", e.target.value);\n    let finalValue;\n    // validate\n    //   ? type === \"onlyAlpha\"\n    //     ? Alphacharregex.test(e?.target?.value)\n    //       ? e?.target?.value\n    //       : \"\"\n    //     :\n    //   : e?.target?.value;\n\n    switch (type) {\n      case \"onlyAlpha\":\n        console.log(\"onlyAlpha\");\n        finalValue = Alphacharregex.test(e?.target?.value)\n          ? e?.target?.value\n          : \"\";\n        setinputValue(finalValue);\n        break;\n      case \"email\":\n        console.log(\"email\");\n        finalValue = emailRegex.test(e?.target?.value)\n          ? e?.target?.value\n          : e?.target?.value;\n        setinputValue(finalValue);\n        break;\n      default:\n        console.log(\"default\");\n        finalValue = e?.target?.value;\n        setinputValue(finalValue);\n    }\n\n    setinputValue(finalValue);\n  };\n  return (\n    <Box sx={{ p: 1 }}>\n      <TextField\n        fullWidth\n        error={errorStatus}\n        id={label}\n        label={label}\n        variant=\"outlined\"\n        helperText={errorStatus ? helperText : \"\"}\n        onChange={onChangeHandler}\n        value={inputValue}\n      />\n    </Box>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
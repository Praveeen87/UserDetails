{"ast":null,"code":"var _jsxFileName = \"/Users/praveenkumarkrishnan/Desktop/Project/userdetails/src/Components/TextField.js\",\n  _s = $RefreshSig$();\nimport { TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenericInputField(props) {\n  _s();\n  const {\n    label,\n    helperText,\n    maxLength,\n    type,\n    validate = false\n  } = props;\n  const [inputValue, setinputValue] = useState(\"\");\n  const [errorStatus, seterrorStatus] = useState(false);\n  const [helperMessage, setHelperMessage] = useState(helperText);\n  const validateInput = (pattern, input) => {\n    if (validate) {\n      var validInput = pattern.test(input);\n    }\n    return validInput;\n  };\n  const onChangeHandler = (e = {}) => {\n    var _e$target;\n    let targetValue = e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value;\n    let Alphacharregex = /^[a-zA-Z]+$/;\n    let emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    let validInput = validateInput(type == \"onlyAlpha\" ? Alphacharregex : emailRegex, targetValue);\n    if (validInput) {\n      setinputValue(targetValue);\n      seterrorStatus(false);\n    } else {\n      setinputValue(targetValue);\n      seterrorStatus(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 1\n    },\n    children: /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      error: errorStatus,\n      id: label,\n      label: label,\n      variant: \"outlined\",\n      helperText: errorStatus ? helperMessage : \"\",\n      onChange: onChangeHandler,\n      value: inputValue,\n      inputProps: {\n        maxLength: maxLength\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(GenericInputField, \"k/kbFWdcOHuLgvWd8XtV59SKG14=\");\n_c = GenericInputField;\nvar _c;\n$RefreshReg$(_c, \"GenericInputField\");","map":{"version":3,"names":["TextField","Box","useState","jsxDEV","_jsxDEV","GenericInputField","props","_s","label","helperText","maxLength","type","validate","inputValue","setinputValue","errorStatus","seterrorStatus","helperMessage","setHelperMessage","validateInput","pattern","input","validInput","test","onChangeHandler","e","_e$target","targetValue","target","value","Alphacharregex","emailRegex","sx","p","children","fullWidth","error","id","variant","onChange","inputProps","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/praveenkumarkrishnan/Desktop/Project/userdetails/src/Components/TextField.js"],"sourcesContent":["import { TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useState } from \"react\";\n\nexport default function GenericInputField(props) {\n  const { label, helperText, maxLength, type, validate = false } = props;\n\n  const [inputValue, setinputValue] = useState(\"\");\n  const [errorStatus, seterrorStatus] = useState(false);\n  const [helperMessage, setHelperMessage] = useState(helperText);\n\n  const validateInput = (pattern, input) => {\n    if (validate) {\n      var validInput = pattern.test(input);\n    }\n    return validInput;\n  };\n\n  const onChangeHandler = (e = {}) => {\n    let targetValue = e?.target?.value;\n    let Alphacharregex = /^[a-zA-Z]+$/;\n    let emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    let validInput = validateInput(\n      type == \"onlyAlpha\" ? Alphacharregex : emailRegex,\n      targetValue\n    );\n    if (validInput) {\n      setinputValue(targetValue);\n      seterrorStatus(false);\n    } else {\n      setinputValue(targetValue);\n      seterrorStatus(true);\n    }\n  };\n\n  return (\n    <Box sx={{ p: 1 }}>\n      <TextField\n        fullWidth\n        error={errorStatus}\n        id={label}\n        label={label}\n        variant=\"outlined\"\n        helperText={errorStatus ? helperMessage : \"\"}\n        onChange={onChangeHandler}\n        value={inputValue}\n        inputProps={{ maxLength: maxLength }}\n      />\n    </Box>\n  );\n}\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,GAAG,QAAQ,aAAa;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,eAAe,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC/C,MAAM;IAAEC,KAAK;IAAEC,UAAU;IAAEC,SAAS;IAAEC,IAAI;IAAEC,QAAQ,GAAG;EAAM,CAAC,GAAGN,KAAK;EAEtE,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACe,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAACO,UAAU,CAAC;EAE9D,MAAMU,aAAa,GAAGA,CAACC,OAAO,EAAEC,KAAK,KAAK;IACxC,IAAIT,QAAQ,EAAE;MACZ,IAAIU,UAAU,GAAGF,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;IACtC;IACA,OAAOC,UAAU;EACnB,CAAC;EAED,MAAME,eAAe,GAAGA,CAACC,CAAC,GAAG,CAAC,CAAC,KAAK;IAAA,IAAAC,SAAA;IAClC,IAAIC,WAAW,GAAGF,CAAC,aAADA,CAAC,wBAAAC,SAAA,GAADD,CAAC,CAAEG,MAAM,cAAAF,SAAA,uBAATA,SAAA,CAAWG,KAAK;IAClC,IAAIC,cAAc,GAAG,aAAa;IAClC,IAAIC,UAAU,GAAG,6CAA6C;IAE9D,IAAIT,UAAU,GAAGH,aAAa,CAC5BR,IAAI,IAAI,WAAW,GAAGmB,cAAc,GAAGC,UAAU,EACjDJ,WACF,CAAC;IACD,IAAIL,UAAU,EAAE;MACdR,aAAa,CAACa,WAAW,CAAC;MAC1BX,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,MAAM;MACLF,aAAa,CAACa,WAAW,CAAC;MAC1BX,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,oBACEZ,OAAA,CAACH,GAAG;IAAC+B,EAAE,EAAE;MAAEC,CAAC,EAAE;IAAE,CAAE;IAAAC,QAAA,eAChB9B,OAAA,CAACJ,SAAS;MACRmC,SAAS;MACTC,KAAK,EAAErB,WAAY;MACnBsB,EAAE,EAAE7B,KAAM;MACVA,KAAK,EAAEA,KAAM;MACb8B,OAAO,EAAC,UAAU;MAClB7B,UAAU,EAAEM,WAAW,GAAGE,aAAa,GAAG,EAAG;MAC7CsB,QAAQ,EAAEf,eAAgB;MAC1BK,KAAK,EAAEhB,UAAW;MAClB2B,UAAU,EAAE;QAAE9B,SAAS,EAAEA;MAAU;IAAE;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACrC,EAAA,CA/CuBF,iBAAiB;AAAAwC,EAAA,GAAjBxC,iBAAiB;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}